openapi: 3.0.1
info:
  title: NFV Test API
  description: Test api for client side network operations
  version: '1.0'
servers:
  - url: /api/v2
tags:
  - name: namespaces
    description: Basic namespace management
  - name: interfaces
    description: Basic interface management
  - name: routes
    description: Read routes on the host
  - name: actions
    description: Execute some actions on the host
  - name: gnodeb
    description: Basic gnodeb management
  - name: ue
    description: Basic user equipment management
paths:
  /actions/ns/{ns_name}/ping:
    post:
      tags:
        - actions
      summary: Send ping requests to a destination
      description: >-
        The server will synchronously send ping requests to the required
        address, and them reply

        with the result.  It is the user responsibility not to set ping interval
        and count that would

        make the server request timeout.
      operationId: post_one_ping_in_namespace
      parameters:
        - name: ns_name
          in: path
          description: The name of the namespace in which to execute the ping
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingRequest'
        required: true
      responses:
        '200':
          description: The ping request has been executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
      x-codegen-request-body-name: payload
  /actions/ping:
    post:
      tags:
        - actions
      summary: Send ping requests to a destination
      description: >-
        The server will synchronously send ping requests to the required
        address, and them reply

        with the result.  It is the user responsibility not to set ping interval
        and count that would

        make the server request timeout.
      operationId: post_one_ping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingRequest'
        required: true
      responses:
        '200':
          description: The ping request has been executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
      x-codegen-request-body-name: payload
  /gnodeb:
    get:
      tags:
        - gnodeb
      summary: Get all gNodeBs
      operationId: get_all_g_node_b
      responses:
        '200':
          description: Get all gNodeB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GNodeB'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - gnodeb
      summary: Create an gNodeB configuration
      description: >-
        The gNodeB is identified by its nci, if another gNodeB with the same nci
        already exists, a

        conflict error is raised.
      operationId: post_all_g_node_b
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GNodeBCreate'
        required: true
      responses:
        '201':
          description: A new gNodeB configuration has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GNodeB'
        '409':
          description: Another gNodeB with the same nci already exists
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /gnodeb/{nci}:
    get:
      tags:
        - gnodeb
      summary: Get a gNodeB configuration
      description: The gNodeB is identified by its nci.
      operationId: get_one_g_node_b
      parameters:
        - name: nci
          in: path
          description: The radio cell identifier, identify the cell of the gNodeB.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found a gNodeB config with a matching nci
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GNodeB'
        '404':
          description: Couldn't find any gNodeB with given nci
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - gnodeb
      summary: Delete a gNodeB configuration
      description: >-
        The gNodeB is identified by its nci. This method is idempotent, if the
        gNodeB

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_g_node_b
      parameters:
        - name: nci
          in: path
          description: The radio cell identifier, identify the cell of the gNodeB.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The gNodeB config doesn't exist anymore
          content: {}
        '404':
          description: The gNodeB config could not be found.
          content: {}
        '409':
          description: The gNodeB client should be stopped before removing config.
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /gnodeb/{nci}/start:
    post:
      tags:
        - gnodeb
      summary: Start a gNodeB configuration
      description: The gNodeB is identified by its nci.
      operationId: post_start_g_node_b
      parameters:
        - name: nci
          in: path
          description: The radio cell identifier, identify the cell of the gNodeB.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: gNodeB started
          content: {}
        '404':
          description: Couldn't find any gNodeB with given nci
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /gnodeb/{nci}/status:
    get:
      tags:
        - gnodeb
      summary: Get the status of a gNodeB
      description: The gNodeB is identified by its nci.
      operationId: get_status_g_node_b
      parameters:
        - name: nci
          in: path
          description: The radio cell identifier, identify the cell of the gNodeB.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found a gNodeB config with a matching nci
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GNodeBStatus'
        '404':
          description: Couldn't find any gNodeB with given nci
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /gnodeb/{nci}/stop:
    post:
      tags:
        - gnodeb
      summary: Start a gNodeB configuration
      description: The gNodeB is identified by its nci.
      operationId: post_stop_g_node_b
      parameters:
        - name: nci
          in: path
          description: The radio cell identifier, identify the cell of the gNodeB.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: gNodeB stopped
          content: {}
        '404':
          description: Couldn't find any gNodeB with given nci
          content: {}
        '409':
          description: A gNodeB with given nci is already running
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /interfaces:
    get:
      tags:
        - interfaces
      summary: Get all interfaces on the host
      operationId: get_all_interfaces
      responses:
        '200':
          description: Get all interfaces on the host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - interfaces
      summary: Create an interface on the host
      description: >-
        The interface is identified by its name, if another interface with the
        same name already exists, a

        conflict error is raised.
      operationId: post_all_interfaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceCreate'
        required: true
      responses:
        '201':
          description: A new interface has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '409':
          description: Another interface with the same name already exists
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /interfaces/ns/{ns_name}:
    get:
      tags:
        - interfaces
      summary: Get all interfaces on the host
      operationId: get_all_interfaces_in_namespace
      parameters:
        - name: ns_name
          in: path
          description: The name of the namespace in which interfaces belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get all interfaces on the host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - interfaces
      summary: Create an interface on the host
      description: >-
        The interface is identified by its name, if another interface with the
        same name already exists, a

        conflict error is raised.
      operationId: post_all_interfaces_in_namespace
      parameters:
        - name: ns_name
          in: path
          description: The name of the namespace in which interfaces belong
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceCreate'
        required: true
      responses:
        '201':
          description: A new interface has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '409':
          description: Another interface with the same name already exists
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /interfaces/ns/{ns_name}/{name}:
    get:
      tags:
        - interfaces
      summary: Get an interface on the host
      description: The interface is identified by its name.
      operationId: get_one_interface_in_namespace
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which interfaces belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found an interface with a matching name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '404':
          description: Couldn't find any interface with given name
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - interfaces
      summary: Delete an interface from the host
      description: >-
        The interface is identified by its name. This method is idempotent, if
        the interface

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_interface_in_namespace
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which interfaces belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The interface doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - interfaces
      summary: Update an interface on the host
      description: The interface is identified by its name.
      operationId: patch_one_interface_in_namespace
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which interfaces belong
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceUpdate'
        required: true
      responses:
        '200':
          description: The interface has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '404':
          description: Couldn't find any interface with given name
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /interfaces/{name}:
    get:
      tags:
        - interfaces
      summary: Get an interface on the host
      description: The interface is identified by its name.
      operationId: get_one_interface
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found an interface with a matching name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '404':
          description: Couldn't find any interface with given name
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - interfaces
      summary: Delete an interface from the host
      description: >-
        The interface is identified by its name. This method is idempotent, if
        the interface

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_interface
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The interface doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - interfaces
      summary: Update an interface on the host
      description: The interface is identified by its name.
      operationId: patch_one_interface
      parameters:
        - name: name
          in: path
          description: The name of the interface we mean to select
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceUpdate'
        required: true
      responses:
        '200':
          description: The interface has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '404':
          description: Couldn't find any interface with given name
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /namespaces:
    get:
      tags:
        - namespaces
      summary: Get all namespaces on the host
      operationId: get_all_namespaces
      responses:
        '200':
          description: Get all namespaces on the host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - namespaces
      summary: Create a namespace on the host
      description: >-
        The namespace is identified by its name, if another namespace with the
        same name already exists, a

        conflict error is raised.
      operationId: post_all_namespaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceCreate'
        required: true
      responses:
        '201':
          description: A new namespace has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '409':
          description: Another namespace with the same name or id already exists
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /namespaces/{name}:
    get:
      tags:
        - namespaces
      summary: Get a namespace on the host
      description: The namespace is identified by its name.
      operationId: get_one_namespace
      parameters:
        - name: name
          in: path
          description: The name of the namespace we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found a namespace with a matching name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '404':
          description: Couldn't find any namespace with given name
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - namespaces
      summary: Delete a namespace from the host
      description: >-
        The namespace is identified by its name. This method is idempotent, if
        the namespace

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_namespace
      parameters:
        - name: name
          in: path
          description: The name of the namespace we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The namespace doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /routes:
    get:
      tags:
        - routes
      summary: Get all routes on the host
      operationId: get_all_routes
      responses:
        '200':
          description: Get all routes on the host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - routes
      summary: Create a route on the host
      description: >-
        The route is identified by its destination address, if another route
        with the same destination

        already exists, a conflict error is raised.
      operationId: post_all_routes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreate'
        required: true
      responses:
        '201':
          description: A new route has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '409':
          description: Another route with the same name already exists
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /routes/ns/{ns_name}:
    get:
      tags:
        - routes
      summary: Get all routes on the host
      operationId: get_all_routes_in_namespace
      parameters:
        - name: ns_name
          in: path
          description: The name of the namespace in which routes belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get all routes on the host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - routes
      summary: Create a route on the host
      description: >-
        The route is identified by its destination address, if another route
        with the same destination

        already exists, a conflict error is raised.
      operationId: post_all_routes_in_namespace
      parameters:
        - name: ns_name
          in: path
          description: The name of the namespace in which routes belong
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreate'
        required: true
      responses:
        '201':
          description: A new route has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '409':
          description: Another route with the same name already exists
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /routes/ns/{ns_name}/{dst_addr}:
    get:
      tags:
        - routes
      summary: Get a route on the host
      description: The route is identified by its destination.
      operationId: get_one_route_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found an route with a matching destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - routes
      summary: Delete a route from the host
      description: >-
        The route is identified by its destination. This method is idempotent,
        if the route

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_route_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The route doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - routes
      summary: Update a route on the host
      description: The route is identified by its destination.
      operationId: patch_one_route_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdate'
        required: true
      responses:
        '200':
          description: The route has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination address
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /routes/ns/{ns_name}/{dst_addr}/{dst_prefix_len}:
    get:
      tags:
        - routes
      summary: Get a route on the host
      description: The route is identified by its destination.
      operationId: get_one_route_with_prefix_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found an route with a matching destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - routes
      summary: Delete a route from the host
      description: >-
        The route is identified by its destination. This method is idempotent,
        if the route

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_route_with_prefix_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The route doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - routes
      summary: Update a route on the host
      description: The route is identified by its destination.
      operationId: patch_one_route_with_prefix_in_namespace
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
        - name: ns_name
          in: path
          description: The name of the namespace in which the route belong
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdate'
        required: true
      responses:
        '200':
          description: The route has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination address
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /routes/{dst_addr}:
    get:
      tags:
        - routes
      summary: Get a route on the host
      description: The route is identified by its destination.
      operationId: get_one_route
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found an route with a matching destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - routes
      summary: Delete a route from the host
      description: >-
        The route is identified by its destination. This method is idempotent,
        if the route

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_route
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The route doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - routes
      summary: Update a route on the host
      description: The route is identified by its destination.
      operationId: patch_one_route
      parameters:
        - name: dst_addr
          in: path
          description: >-
            The destination ("default" or any address with a prefix length) of
            the route we mean to select
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdate'
        required: true
      responses:
        '200':
          description: The route has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination address
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /routes/{dst_addr}/{dst_prefix_len}:
    get:
      tags:
        - routes
      summary: Get a route on the host
      description: The route is identified by its destination.
      operationId: get_one_route_with_prefix
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found an route with a matching destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - routes
      summary: Delete a route from the host
      description: >-
        The route is identified by its destination. This method is idempotent,
        if the route

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_route_with_prefix
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The route doesn't exist anymore
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    patch:
      tags:
        - routes
      summary: Update a route on the host
      description: The route is identified by its destination.
      operationId: patch_one_route_with_prefix
      parameters:
        - name: dst_addr
          in: path
          description: The address of the destination of the route
          required: true
          schema:
            type: string
        - name: dst_prefix_len
          in: path
          description: The prefix length of the destination of the route
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdate'
        required: true
      responses:
        '200':
          description: The route has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Couldn't find any route with given destination address
          content: {}
        '422':
          description: Couldn't update route because of invalid input
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /ue:
    get:
      tags:
        - ue
      summary: Get all UEs
      operationId: get_all_ue
      responses:
        '200':
          description: Get all UE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UE'
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    post:
      tags:
        - ue
      summary: Create an UE configuration
      description: >-
        The UE is identified by its supi, if another UE with the same supi
        already exists, a

        conflict error is raised.
      operationId: post_all_ue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UECreate'
        required: true
      responses:
        '201':
          description: A new UE configuration has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UE'
        '409':
          description: Another UE with the same supi already exists
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
      x-codegen-request-body-name: payload
  /ue/{supi}:
    get:
      tags:
        - ue
      summary: Get a UE configuration
      description: The UE is identified by its supi.
      operationId: get_one_ue
      parameters:
        - name: supi
          in: path
          description: The radio cell identifier, identify the cell of the UE.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found a UE config with a matching supi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UE'
        '404':
          description: Couldn't find any UE with given supi
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
    delete:
      tags:
        - ue
      summary: Delete a UE configuration
      description: >-
        The UE is identified by its supi. This method is idempotent, if the UE

        doesn't exist it won't try to delete it again, and consider the deletion
        successful.
      operationId: delete_one_ue
      parameters:
        - name: supi
          in: path
          description: The radio cell identifier, identify the cell of the UE.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The UE config doesn't exist anymore
          content: {}
        '404':
          description: The UE config could not be found.
          content: {}
        '409':
          description: The UE client should be stopped before removing config.
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /ue/{supi}/start:
    post:
      tags:
        - ue
      summary: Start a UE configuration
      description: The UE is identified by its supi.
      operationId: post_start_ue
      parameters:
        - name: supi
          in: path
          description: The radio cell identifier, identify the cell of the UE.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: UE started
          content: {}
        '404':
          description: Couldn't find any UE with given supi
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /ue/{supi}/status:
    get:
      tags:
        - ue
      summary: Get the status of a UE
      description: The UE is identified by its supi.
      operationId: get_status_ue
      parameters:
        - name: supi
          in: path
          description: The radio cell identifier, identify the cell of the UE.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found a UE config with a matching supi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UEStatus'
        '404':
          description: Couldn't find any UE with given supi
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
  /ue/{supi}/stop:
    post:
      tags:
        - ue
      summary: Start a UE configuration
      description: The UE is identified by its supi.
      operationId: post_stop_ue
      parameters:
        - name: supi
          in: path
          description: The radio cell identifier, identify the cell of the UE.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: UE stopped
          content: {}
        '404':
          description: Couldn't find any UE with given supi
          content: {}
        '409':
          description: A UE with given supi is already running
          content: {}
        '500':
          description: >-
            An error occurred when trying to process the request, this can also
            be because of bad input from the user
          content: {}
components:
  schemas:
    NamespaceCreate:
      title: NamespaceCreate
      description: >-
        Input for creating a network namespace


        :param ns_id: The optional namespace id, if none is provided, one will
        be picked in the pool of available ids
      type: object
      properties:
        name:
          title: Name
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        ns_id:
          title: Nsid
          type: integer
      required:
        - name
    Namespace:
      title: Namespace
      description: A namespace, as returned by the `ip netns list-id` command
      type: object
      properties:
        name:
          title: Name
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        ns_id:
          title: Nsid
          type: integer
      required:
        - ns_id
    InterfaceCreate:
      title: InterfaceCreate
      description: Input schema for creating an interface
      type: object
      properties:
        name:
          title: Name
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        parent_dev:
          title: Parentdev
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        mtu:
          title: Mtu
          type: integer
        address:
          title: Address
          anyOf:
            - type: string
              format: ipv4interface
            - type: string
              format: ipv6interface
        broadcast:
          title: Broadcast
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        type:
          default: veth
          allOf:
            - $ref: '#/components/schemas/Kind'
        peer:
          title: Peer
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        slave_interfaces:
          title: Slaveinterfaces
          type: array
          items:
            type: string
            pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
      required:
        - name
    Interface:
      title: Interface
      description: An interface as returned by the `ip addr` command
      type: object
      properties:
        if_index:
          title: Ifindex
          type: integer
        link_index:
          title: Linkindex
          type: integer
        if_name:
          title: Ifname
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        flags:
          title: Flags
          type: array
          items:
            type: string
            pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
        mtu:
          title: Mtu
          type: integer
        max_mtu:
          title: Maxmtu
          type: integer
        min_mtu:
          title: Minmtu
          type: integer
        master:
          title: Master
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        oper_state:
          $ref: '#/components/schemas/InterfaceState'
        group:
          title: Group
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        link_type:
          title: Linktype
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        address:
          title: Address
          pattern: ^([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2}$
          type: string
        broadcast:
          title: Broadcast
          pattern: ^([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2}$
          type: string
        link_netns_id:
          title: Linknetnsid
          type: integer
        link_info:
          $ref: '#/components/schemas/LinkInfo'
        addr_info:
          title: Addrinfo
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Addr4Info'
              - $ref: '#/components/schemas/Addr6Info'
        alt_names:
          title: Altnames
          type: array
          items:
            type: string
            pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
      required:
        - if_index
        - if_name
        - flags
        - mtu
        - oper_state
        - group
        - link_type
        - addr_info
    InterfaceUpdate:
      title: InterfaceUpdate
      description: |-
        Input schema for updating an interface.

        All the fields are optional, any value non specified or null will
        be ignored for the update.
        And empty body will result in not update.
      type: object
      properties:
        name:
          title: Name
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        state:
          title: State
          anyOf:
            - enum:
                - UP
              type: string
            - enum:
                - DOWN
              type: string
        mtu:
          title: Mtu
          type: integer
        addresses:
          title: Addresses
          type: array
          items:
            anyOf:
              - type: string
                format: ipv4interface
              - type: string
                format: ipv6interface
        master:
          title: Master
          anyOf:
            - type: string
              pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
            - enum:
                - nomaster
              type: string
        netns:
          title: Netns
          anyOf:
            - type: string
              pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
            - type: integer
    RouteCreate:
      title: RouteCreate
      description: Input for creating a route
      type: object
      properties:
        dst:
          title: Dst
          anyOf:
            - type: string
              format: ipv4interface
            - type: string
              format: ipv6interface
            - enum:
                - default
              type: string
        gateway:
          title: Gateway
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        dev:
          title: Dev
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
      required:
        - dst
        - dev
    Route:
      title: Route
      description: A route as return by the command `ip route`
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Type'
        dst:
          title: Dst
          anyOf:
            - type: string
              format: ipv4interface
            - type: string
              format: ipv6interface
            - enum:
                - default
              type: string
        gateway:
          title: Gateway
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        dev:
          title: Dev
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        protocol:
          title: Protocol
          anyOf:
            - $ref: '#/components/schemas/Protocol'
            - type: integer
            - type: string
              pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
        scope:
          title: Scope
          anyOf:
            - $ref: '#/components/schemas/Scope'
            - type: integer
        flags:
          title: Flags
          type: array
          items:
            type: string
            pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
        pref_src:
          title: Prefsrc
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        metric:
          title: Metric
          type: integer
      required:
        - type
        - dst
        - dev
        - protocol
        - scope
        - flags
    RouteUpdate:
      title: RouteUpdate
      description: Input for updating a route
      type: object
      properties:
        gateway:
          title: Gateway
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        dev:
          title: Dev
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
      required:
        - dev
    PingRequest:
      title: PingRequest
      type: object
      properties:
        destination:
          title: Destination
          anyOf:
            - type: string
              pattern: >-
                ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        interface:
          title: Interface
          anyOf:
            - type: string
              pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
            - type: string
              format: ipv4interface
            - type: string
              format: ipv6interface
        count:
          title: Count
          default: 4
          type: integer
        interval:
          title: Interval
          default: 0.5
          type: number
      required:
        - destination
    Ping:
      title: Ping
      type: object
      properties:
        destination:
          title: Destination
          anyOf:
            - type: string
              pattern: >-
                ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        packet_duplicate_count:
          title: Packetduplicatecount
          type: integer
        packet_duplicate_rate:
          title: Packetduplicaterate
          type: number
        packet_loss_count:
          title: Packetlosscount
          type: integer
        packet_loss_rate:
          title: Packetlossrate
          type: number
        packet_receive:
          title: Packetreceive
          type: integer
        packet_transmit:
          title: Packettransmit
          type: integer
        rtt_avg:
          title: Rttavg
          type: number
        rtt_max:
          title: Rttmax
          type: number
        rtt_mdev:
          title: Rttmdev
          type: number
        rtt_min:
          title: Rttmin
          type: number
      required:
        - destination
        - packet_duplicate_count
        - packet_loss_count
        - packet_loss_rate
        - packet_receive
        - packet_transmit
    GNodeBCreate:
      title: GNodeBCreate
      description: Input schema for creating a gNodeB
      type: object
      properties:
        mcc:
          title: Mcc
          type: string
        mnc:
          title: Mnc
          type: string
        nci:
          title: Nci
          pattern: 0x[0-9a-fA-F]{9}
          type: string
        idLength:
          title: Idlength
          type: integer
        tac:
          title: Tac
          type: integer
        linkIp:
          title: Linkip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        ngapIp:
          title: Ngapip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        gtpIp:
          title: Gtpip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        amfConfigs:
          title: Amfconfigs
          type: array
          items:
            $ref: '#/components/schemas/AmfConfig'
        slices:
          title: Slices
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        ignoreStreamIds:
          title: Ignorestreamids
          type: boolean
      required:
        - mcc
        - mnc
        - nci
        - idLength
        - tac
        - linkIp
        - ngapIp
        - gtpIp
        - amfConfigs
        - slices
        - ignoreStreamIds
    GNodeB:
      title: GNodeB
      description: A gNodeB identified by its nci.
      type: object
      properties:
        mcc:
          title: Mcc
          type: string
        mnc:
          title: Mnc
          type: string
        nci:
          title: Nci
          pattern: 0x[0-9a-fA-F]{9}
          type: string
        idLength:
          title: Idlength
          type: integer
        tac:
          title: Tac
          type: integer
        linkIp:
          title: Linkip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        ngapIp:
          title: Ngapip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        gtpIp:
          title: Gtpip
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        amfConfigs:
          title: Amfconfigs
          type: array
          items:
            $ref: '#/components/schemas/AmfConfig'
        slices:
          title: Slices
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        ignoreStreamIds:
          title: Ignorestreamids
          type: boolean
      required:
        - mcc
        - mnc
        - nci
        - idLength
        - tac
        - linkIp
        - ngapIp
        - gtpIp
        - amfConfigs
        - slices
        - ignoreStreamIds
    GNodeBStatus:
      title: GNodeBStatus
      description: Input schema for creating a gNodeB
      type: object
      properties:
        status:
          title: Status
          type: string
        pid:
          title: Pid
          type: integer
        logs:
          title: Logs
          type: string
      required:
        - status
        - pid
        - logs
    UECreate:
      title: UECreate
      description: Input schema for creating a UE
      type: object
      properties:
        supi:
          title: Supi
          pattern: imsi-[0-9]{15}
          type: string
        mcc:
          title: Mcc
          type: string
        mnc:
          title: Mnc
          type: string
        key:
          title: Key
          type: string
        op:
          title: Op
          type: string
        opType:
          $ref: '#/components/schemas/OpType'
        amf:
          title: Amf
          type: string
        imei:
          title: Imei
          type: string
        imeiSv:
          title: Imeisv
          type: string
        gnbSearchList:
          title: Gnbsearchlist
          type: array
          items:
            anyOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        uacAic:
          $ref: '#/components/schemas/UacAic'
        uacAcc:
          $ref: '#/components/schemas/UacAcc'
        sessions:
          title: Sessions
          type: array
          items:
            $ref: '#/components/schemas/Session'
        configured_nssai:
          title: Configured-Nssai
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        default_nssai:
          title: Default-Nssai
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        integrity:
          $ref: '#/components/schemas/Integrity'
        ciphering:
          $ref: '#/components/schemas/Ciphering'
        integrityMaxRate:
          $ref: '#/components/schemas/IntegrityMaxRate'
      required:
        - supi
        - mcc
        - mnc
        - key
        - op
        - opType
        - amf
        - imei
        - imeiSv
        - gnbSearchList
        - uacAic
        - uacAcc
        - sessions
        - configured_nssai
        - default_nssai
        - integrity
        - ciphering
        - integrityMaxRate
    UE:
      title: UE
      description: A UE identified by its supi.
      type: object
      properties:
        supi:
          title: Supi
          pattern: imsi-[0-9]{15}
          type: string
        mcc:
          title: Mcc
          type: string
        mnc:
          title: Mnc
          type: string
        key:
          title: Key
          type: string
        op:
          title: Op
          type: string
        opType:
          $ref: '#/components/schemas/OpType'
        amf:
          title: Amf
          type: string
        imei:
          title: Imei
          type: string
        imeiSv:
          title: Imeisv
          type: string
        gnbSearchList:
          title: Gnbsearchlist
          type: array
          items:
            anyOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        uacAic:
          $ref: '#/components/schemas/UacAic'
        uacAcc:
          $ref: '#/components/schemas/UacAcc'
        sessions:
          title: Sessions
          type: array
          items:
            $ref: '#/components/schemas/Session'
        configured_nssai:
          title: Configured-Nssai
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        default_nssai:
          title: Default-Nssai
          type: array
          items:
            $ref: '#/components/schemas/Slice'
        integrity:
          $ref: '#/components/schemas/Integrity'
        ciphering:
          $ref: '#/components/schemas/Ciphering'
        integrityMaxRate:
          $ref: '#/components/schemas/IntegrityMaxRate'
      required:
        - supi
        - mcc
        - mnc
        - key
        - op
        - opType
        - amf
        - imei
        - imeiSv
        - gnbSearchList
        - uacAic
        - uacAcc
        - sessions
        - configured_nssai
        - default_nssai
        - integrity
        - ciphering
        - integrityMaxRate
    UEStatus:
      title: UEStatus
      description: Input schema for creating a UE
      type: object
      properties:
        status:
          title: Status
          type: string
        pid:
          title: Pid
          type: integer
        logs:
          title: Logs
          type: string
      required:
        - status
        - pid
        - logs
    Kind:
      title: Kind
      description: An enumeration.
      enum:
        - bond
        - veth
        - bridge
        - tun
        - vlan
      type: string
    InterfaceState:
      title: InterfaceState
      description: |2-

            The different states an interface can be in
            
      enum:
        - UP
        - DOWN
        - UNKNOWN
        - LOWERLAYERDOWN
      type: string
    LinkInfo:
      title: LinkInfo
      description: >-
        Information about a link, related to its specific kind, as returned by
        `ip addr`
      type: object
      properties:
        info_kind:
          $ref: '#/components/schemas/Kind'
        info_data:
          title: Infodata
          type: object
        info_slave_kind:
          $ref: '#/components/schemas/Kind'
        info_slave_data:
          title: Infoslavedata
          type: object
      required:
        - info_kind
    Scope:
      title: Scope
      description: An enumeration.
      enum:
        - global
        - link
        - host
      type: string
    Addr4Info:
      title: Addr4Info
      description: >-
        Information about an IPv4 address of an interface, as returned by `ip
        addr`
      type: object
      properties:
        family:
          title: Family
          enum:
            - inet
          type: string
        prefix_len:
          title: Prefixlen
          type: integer
        scope:
          title: Scope
          anyOf:
            - $ref: '#/components/schemas/Scope'
            - type: integer
        label:
          title: Label
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        valid_life_time:
          title: Validlifetime
          type: integer
        preferred_life_time:
          title: Preferredlifetime
          type: integer
        no_prefix_route:
          title: Noprefixroute
          default: false
          type: boolean
        auto_join:
          title: Autojoin
          default: false
          type: boolean
        local:
          title: Local
          type: string
          format: ipv4
        broadcast:
          title: Broadcast
          type: string
          format: ipv4
      required:
        - family
        - prefix_len
        - scope
        - valid_life_time
        - preferred_life_time
        - local
    Addr6Info:
      title: Addr6Info
      description: >-
        Information about an IPv6 address of an interface, as returned by `ip
        addr`
      type: object
      properties:
        family:
          title: Family
          enum:
            - inet6
          type: string
        prefix_len:
          title: Prefixlen
          type: integer
        scope:
          title: Scope
          anyOf:
            - $ref: '#/components/schemas/Scope'
            - type: integer
        label:
          title: Label
          pattern: ^[0-9A-Z-a-z@#$_\-.]{1,16}$
          type: string
        valid_life_time:
          title: Validlifetime
          type: integer
        preferred_life_time:
          title: Preferredlifetime
          type: integer
        no_prefix_route:
          title: Noprefixroute
          default: false
          type: boolean
        auto_join:
          title: Autojoin
          default: false
          type: boolean
        local:
          title: Local
          type: string
          format: ipv6
        broadcast:
          title: Broadcast
          type: string
          format: ipv6
        no_dad:
          title: Nodad
          default: false
          type: boolean
        optimistic:
          title: Optimistic
          default: false
          type: boolean
        home:
          title: Home
          default: false
          type: boolean
        mng_tmp_addr:
          title: Mngtmpaddr
          default: false
          type: boolean
      required:
        - family
        - prefix_len
        - scope
        - valid_life_time
        - preferred_life_time
        - local
    Type:
      title: Type
      description: An enumeration.
      enum:
        - unicast
        - local
        - broadcast
        - multicast
        - throw
        - unreachable
        - prohibit
        - blackhole
        - nat
      type: string
    Protocol:
      title: Protocol
      description: An enumeration.
      enum:
        - boot
        - static
        - kernel
        - redirect
        - ra
      type: string
    AmfConfig:
      title: AmfConfig
      description: AMF address information
      type: object
      properties:
        address:
          title: Address
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        port:
          title: Port
          type: integer
      required:
        - address
        - port
    Slice:
      title: Slice
      description: S-NSSAIs
      type: object
      properties:
        sst:
          title: Sst
          type: integer
        sd:
          title: Sd
          type: integer
      required:
        - sst
    OpType:
      title: OpType
      description: An enumeration.
      enum:
        - OP
        - OPC
      type: string
    UacAic:
      title: UacAic
      description: UAC Access Identities Configuration
      type: object
      properties:
        mps:
          title: Mps
          type: boolean
        mcs:
          title: Mcs
          type: boolean
      required:
        - mps
        - mcs
    UacAcc:
      title: UacAcc
      description: UAC Access Control Class
      type: object
      properties:
        normalClass:
          title: Normalclass
          type: integer
        class11:
          title: Class11
          type: boolean
        class12:
          title: Class12
          type: boolean
        class13:
          title: Class13
          type: boolean
        class14:
          title: Class14
          type: boolean
        class15:
          title: Class15
          type: boolean
      required:
        - normalClass
        - class11
        - class12
        - class13
        - class14
        - class15
    PDUSessionType:
      title: PDUSessionType
      description: An enumeration.
      enum:
        - IPv4
      type: string
    Session:
      title: Session
      description: Initial PDU session to be established
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PDUSessionType'
        apn:
          title: Apn
          type: string
        slice:
          $ref: '#/components/schemas/Slice'
      required:
        - type
    Integrity:
      title: Integrity
      description: Supported integrity algorithms by this UE
      type: object
      properties:
        IA1:
          title: Ia1
          type: boolean
        IA2:
          title: Ia2
          type: boolean
        IA3:
          title: Ia3
          type: boolean
      required:
        - IA1
        - IA2
        - IA3
    Ciphering:
      title: Ciphering
      description: Supported encryption algorithms by this UE
      type: object
      properties:
        EA1:
          title: Ea1
          type: boolean
        EA2:
          title: Ea2
          type: boolean
        EA3:
          title: Ea3
          type: boolean
      required:
        - EA1
        - EA2
        - EA3
    MaxRate:
      title: MaxRate
      description: An enumeration.
      enum:
        - full
        - 64kbps
      type: string
    IntegrityMaxRate:
      title: IntegrityMaxRate
      description: Integrity protection maximum data rate for user plane
      type: object
      properties:
        uplink:
          $ref: '#/components/schemas/MaxRate'
        downlink:
          $ref: '#/components/schemas/MaxRate'
      required:
        - uplink
        - downlink
  responses:
    MaskError:
      description: When any error occurs on mask
      content: {}
    ParseError:
      description: When a mask can't be parsed
      content: {}
